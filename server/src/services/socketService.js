const { Server } = require('socket.io');
const jwt = require('jsonwebtoken');
const db = require('./database');

const JWT_SECRET = process.env.JWT_SECRET;

let io = null;

const initialize = async (server) => {
  io = new Server(server, {
    cors: {
      origin: process.env.CLIENT_URL || "http://localhost:3000",
      methods: ["GET", "POST"]
    }
  });

  // Socket.io –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  io.on('connection', async (socket) => {
    console.log('Client connected:', socket.id);
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å userId –∏–∑ —Ç–æ–∫–µ–Ω–∞
      let userId = null;
      const token = socket.handshake.auth?.token;
      
      if (token) {
        try {
          const decoded = jwt.verify(token, JWT_SECRET);
          userId = decoded.id;
          console.log(`Authenticated user ${userId} connected`);
        } catch (err) {
          console.log('Invalid token for socket connection');
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
      await db.addActiveSession(
        socket.id, 
        userId,
        socket.handshake.address,
        socket.handshake.headers['user-agent']
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
      const sessionCount = await db.getActiveSessionsCount();
      io.emit('activeSessionsUpdate', sessionCount);
      console.log(`Active sessions: ${sessionCount}`);
      
    } catch (error) {
      console.error('Error adding session:', error);
    }

    socket.on('disconnect', async (reason) => {
      console.log('Client disconnected:', socket.id, 'Reason:', reason);
      
      try {
        // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        await db.removeActiveSession(socket.id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
        const sessionCount = await db.getActiveSessionsCount();
        io.emit('activeSessionsUpdate', sessionCount);
        console.log(`Active sessions: ${sessionCount}`);
        
      } catch (error) {
        console.error('Error removing session:', error);
      }
    });

    socket.on('beforeUnload', async () => {
      console.log('Client beforeUnload (forced):', socket.id);
      try {
        await db.removeActiveSession(socket.id);
        const sessionCount = await db.getActiveSessionsCount();
        io.emit('activeSessionsUpdate', sessionCount);
      } catch (error) {
        console.error('Error in beforeUnload:', error);
      }
    });
  });

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(async () => {
    try {
      const timeoutMinutes = parseInt(process.env.SESSION_TIMEOUT_MINUTES) || 30;
      await db.cleanupOldSessions(timeoutMinutes);
    } catch (error) {
      console.error('Error cleaning up sessions:', error);
    }
  }, (parseInt(process.env.SESSION_CLEANUP_INTERVAL) || 5) * 60 * 1000);

  console.log('üì° Socket.io service initialized');
};

const getActiveSessionsCount = async () => {
  return await db.getActiveSessionsCount();
};

const cleanup = async () => {
  try {
    console.log('üßπ Cleaning up socket sessions...');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    await db.cleanupOldSessions(0); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î
    if (db.pool) {
      await db.pool.end();
    }
    
    console.log('‚úÖ Socket service cleanup completed');
  } catch (error) {
    console.error('‚ùå Error during socket cleanup:', error);
    throw error;
  }
};

module.exports = {
  initialize,
  getActiveSessionsCount,
  cleanup
};