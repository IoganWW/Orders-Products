// client/src/utils/validation.ts - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –£–ö–†–ê–ò–ù–°–ö–û–ô –ü–û–î–î–ï–†–ñ–ö–û–ô
import { ValidationRule } from '@/hooks/useFormValidation';
import { LoginFormData, RegisterFormData, LoginFormErrors, RegisterFormErrors } from '@/types/auth';

// üéØ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
export const VALIDATION_PATTERNS = {
  EMAIL: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
  PHONE: /^\+?[\d\s\-\(\)]{10,}$/,
  PASSWORD: /^(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{6,}$/,
  PASSWORD_STRONG: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/,
  URL: /^https?:\/\/.+/,
  ALPHANUMERIC: /^[a-zA-Z0-9]+$/,
  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
  LETTERS_ONLY: /^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê\s]+$/,
  NAME: /^[a-zA-Z–∞-ya–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê\s]+$/,
  NUMBERS_ONLY: /^\d+$/,
  SERIAL_NUMBER: /^[A-Za-z0-9\-]+$/
} as const;

// üá∫üá¶ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π regex –¥–ª—è –≤—Å–µ—Ö –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
export const EXTENDED_CYRILLIC = /^[a-zA-Z–∞–ê–±–ë–≤–í–≥–ì“ë“ê–¥–î–µ–ï—î–Ñ—ë–Å–∂–ñ–∑–ó–∏–ò—ñ–Ü—ó–á–π–ô–∫–ö–ª–õ–º–ú–Ω–ù–æ–û–ø–ü—Ä–†—Å–°—Ç–¢—É–£—Ñ–§—Ö–•—Ü–¶—á–ß—à–®—â–©—ä–™—ã–´—å–¨—ç–≠—é–Æ—è–Ø\s]+$/;

// üéØ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export const VALIDATION_LIMITS = {
  NAME_MIN_LENGTH: 3,
  NAME_MAX_LENGTH: 100,
  EMAIL_MAX_LENGTH: 100,
  PASSWORD_MIN_LENGTH: 6,
  PASSWORD_MAX_LENGTH: 128,
  DESCRIPTION_MAX_LENGTH: 1000,
  PHONE_MIN_LENGTH: 10,
  PHONE_MAX_LENGTH: 15,
  SERIAL_NUMBER_MIN_LENGTH: 4,
  SERIAL_NUMBER_MAX_LENGTH: 50,
  TITLE_MIN_LENGTH: 3,
  TITLE_MAX_LENGTH: 255
} as const;

// üéØ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö (—Ä—É—Å—Å–∫–∏–π)
export const VALIDATION_MESSAGES = {
  REQUIRED: (field: string) => `${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`,
  EMAIL_INVALID: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
  EMAIL_EXISTS: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
  PASSWORD_WEAK: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã',
  PASSWORD_STRONG: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã',
  PASSWORDS_NOT_MATCH: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
  NAME_INVALID: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã',
  NAME_FULL_REQUIRED: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é',
  MIN_LENGTH: (field: string, length: number) => `${field} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${length} —Å–∏–º–≤–æ–ª–æ–≤`,
  MAX_LENGTH: (field: string, length: number) => `${field} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º ${length} —Å–∏–º–≤–æ–ª–æ–≤`,
  PATTERN_MISMATCH: (field: string) => `${field} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`,
  MIN_VALUE: (field: string, min: number) => `${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${min}`,
  MAX_VALUE: (field: string, max: number) => `${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ ${max}`,
  PHONE_INVALID: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
  URL_INVALID: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∞–¥—Ä–µ—Å',
  SERIAL_NUMBER_INVALID: '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å',
  PRICE_INVALID: '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
  DATE_INVALID: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É',
  DATE_FUTURE: '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º',
  DATE_PAST: '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º'
} as const;

// üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export const UKRAINIAN_VALIDATION_MESSAGES = {
  REQUIRED: (field: string) => `${field} –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è`,
  EMAIL_INVALID: '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å',
  EMAIL_EXISTS: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î',
  PASSWORD_WEAK: '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏',
  PASSWORD_STRONG: '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º–∞–ª—ñ —Ç–∞ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏',
  PASSWORDS_NOT_MATCH: '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å',
  NAME_INVALID: '–Ü–º\'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏',
  NAME_FULL_REQUIRED: '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ',
  MIN_LENGTH: (field: string, length: number) => `${field} –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º ${length} —Å–∏–º–≤–æ–ª—ñ–≤`,
  MAX_LENGTH: (field: string, length: number) => `${field} –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º ${length} —Å–∏–º–≤–æ–ª—ñ–≤`,
  PATTERN_MISMATCH: (field: string) => `${field} –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç`,
  MIN_VALUE: (field: string, min: number) => `${field} –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ ${min}`,
  MAX_VALUE: (field: string, max: number) => `${field} –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ ${max}`,
  PHONE_INVALID: '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
  URL_INVALID: '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL –∞–¥—Ä–µ—Å',
  SERIAL_NUMBER_INVALID: '–°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –¥–µ—Ñ—ñ—Å',
  PRICE_INVALID: '–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º',
  DATE_INVALID: '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É',
  DATE_FUTURE: '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É',
  DATE_PAST: '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∏–Ω—É–ª–æ–º—É'
} as const;

// üéØ –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
export const validateEmail = (email: string): boolean => {
  if (!email || typeof email !== 'string') return false;
  return VALIDATION_PATTERNS.EMAIL.test(email.trim());
};

export const validateRequired = (value: any): boolean => {
  if (value === null || value === undefined) return false;
  if (typeof value === 'string') return value.trim().length > 0;
  if (Array.isArray(value)) return value.length > 0;
  if (typeof value === 'number') return !isNaN(value);
  return true;
};

export const validateMinLength = (value: string, minLength: number): boolean => {
  return typeof value === 'string' && value.length >= minLength;
};

export const validateMaxLength = (value: string, maxLength: number): boolean => {
  return typeof value === 'string' && value.length <= maxLength;
};

export const validatePassword = (password: string): boolean => {
  if (!password || typeof password !== 'string') return false;
  return VALIDATION_PATTERNS.PASSWORD.test(password);
};

export const validateStrongPassword = (password: string): boolean => {
  if (!password || typeof password !== 'string') return false;
  return VALIDATION_PATTERNS.PASSWORD_STRONG.test(password);
};

export const validatePhone = (phone: string): boolean => {
  if (!phone || typeof phone !== 'string') return false;
  return VALIDATION_PATTERNS.PHONE.test(phone.replace(/\s/g, ''));
};

export const validateUrl = (url: string): boolean => {
  if (!url || typeof url !== 'string') return false;
  return VALIDATION_PATTERNS.URL.test(url);
};

export const validateName = (name: string): boolean => {
  if (!name || typeof name !== 'string') return false;
  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π EXTENDED_CYRILLIC
  return EXTENDED_CYRILLIC.test(name.trim());
};

export const validateFullName = (name: string): boolean => {
  if (!validateName(name)) return false;
  const parts = name.trim().split(' ').filter(part => part.length > 0);
  return parts.length >= 2;
};

export const validateSerialNumber = (serialNumber: string): boolean => {
  if (!serialNumber || typeof serialNumber !== 'string') return false;
  return VALIDATION_PATTERNS.SERIAL_NUMBER.test(serialNumber);
};

export const validatePrice = (price: string | number): boolean => {
  const num = typeof price === 'string' ? parseFloat(price) : price;
  return !isNaN(num) && num > 0;
};

export const validateDate = (date: string): boolean => {
  if (!date || typeof date !== 'string') return false;
  const parsedDate = new Date(date);
  return !isNaN(parsedDate.getTime());
};

export const validateFutureDate = (date: string): boolean => {
  if (!validateDate(date)) return false;
  const parsedDate = new Date(date);
  const now = new Date();
  return parsedDate > now;
};

export const validatePastDate = (date: string): boolean => {
  if (!validateDate(date)) return false;
  const parsedDate = new Date(date);
  const now = new Date();
  return parsedDate <= now;
};

// üéØ –ì–æ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const LOGIN_VALIDATION_CONFIG: Record<keyof LoginFormData, ValidationRule> = {
  email: {
    required: true,
    email: true,
    maxLength: VALIDATION_LIMITS.EMAIL_MAX_LENGTH,
    custom: (value: string) => {
      if (!value?.trim()) {
        return VALIDATION_MESSAGES.REQUIRED('Email');
      }
      if (!validateEmail(value)) {
        return VALIDATION_MESSAGES.EMAIL_INVALID;
      }
      return null;
    }
  },
  password: {
    required: true,
    minLength: 1, // –î–ª—è –ª–æ–≥–∏–Ω–∞ –º–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª
    custom: (value: string) => {
      if (!value) {
        return VALIDATION_MESSAGES.REQUIRED('–ü–∞—Ä–æ–ª—å');
      }
      return null;
    }
  }
};

export const REGISTER_VALIDATION_CONFIG: Record<keyof RegisterFormData, ValidationRule> = {
  name: {
    required: true,
    minLength: VALIDATION_LIMITS.NAME_MIN_LENGTH,
    maxLength: VALIDATION_LIMITS.NAME_MAX_LENGTH,
    pattern: VALIDATION_PATTERNS.NAME,
    custom: (value: string) => {
      if (!value?.trim()) {
        return VALIDATION_MESSAGES.REQUIRED('–ò–º—è');
      }
      if (!validateName(value)) {
        return VALIDATION_MESSAGES.NAME_INVALID;
      }
      if (!validateFullName(value)) {
        return VALIDATION_MESSAGES.NAME_FULL_REQUIRED;
      }
      return null;
    }
  },
  email: {
    required: true,
    email: true,
    maxLength: VALIDATION_LIMITS.EMAIL_MAX_LENGTH,
    custom: (value: string) => {
      if (!value?.trim()) {
        return VALIDATION_MESSAGES.REQUIRED('Email');
      }
      if (!validateEmail(value)) {
        return VALIDATION_MESSAGES.EMAIL_INVALID;
      }
      return null;
    }
  },
  password: {
    required: true,
    minLength: VALIDATION_LIMITS.PASSWORD_MIN_LENGTH,
    maxLength: VALIDATION_LIMITS.PASSWORD_MAX_LENGTH,
    custom: (value: string) => {
      if (!value) {
        return VALIDATION_MESSAGES.REQUIRED('–ü–∞—Ä–æ–ª—å');
      }
      if (!validatePassword(value)) {
        return VALIDATION_MESSAGES.PASSWORD_WEAK;
      }
      return null;
    }
  },
  confirmPassword: {
    required: true,
    custom: (value: string, allValues?: any) => {
      if (!value) {
        return VALIDATION_MESSAGES.REQUIRED('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è');
      }
      if (allValues && value !== allValues.password) {
        return VALIDATION_MESSAGES.PASSWORDS_NOT_MATCH;
      }
      return null;
    }
  }
};

// üéØ –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º
export const validateLoginForm = (formData: LoginFormData): LoginFormErrors => {
  const errors: LoginFormErrors = {};

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  if (!formData.email?.trim()) {
    errors.email = VALIDATION_MESSAGES.REQUIRED('Email');
  } else if (!validateEmail(formData.email)) {
    errors.email = VALIDATION_MESSAGES.EMAIL_INVALID;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  if (!formData.password) {
    errors.password = VALIDATION_MESSAGES.REQUIRED('–ü–∞—Ä–æ–ª—å');
  }

  return errors;
};

export const validateRegisterForm = (formData: RegisterFormData): RegisterFormErrors => {
  const errors: RegisterFormErrors = {};

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
  if (!formData.name?.trim()) {
    errors.name = VALIDATION_MESSAGES.REQUIRED('–ò–º—è');
  } else if (!validateName(formData.name)) {
    errors.name = VALIDATION_MESSAGES.NAME_INVALID;
  } else if (!validateFullName(formData.name)) {
    errors.name = VALIDATION_MESSAGES.NAME_FULL_REQUIRED;
  } else if (formData.name.length < VALIDATION_LIMITS.NAME_MIN_LENGTH) {
    errors.name = VALIDATION_MESSAGES.MIN_LENGTH('–ò–º—è', VALIDATION_LIMITS.NAME_MIN_LENGTH);
  } else if (formData.name.length > VALIDATION_LIMITS.NAME_MAX_LENGTH) {
    errors.name = VALIDATION_MESSAGES.MAX_LENGTH('–ò–º—è', VALIDATION_LIMITS.NAME_MAX_LENGTH);
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  if (!formData.email?.trim()) {
    errors.email = VALIDATION_MESSAGES.REQUIRED('Email');
  } else if (!validateEmail(formData.email)) {
    errors.email = VALIDATION_MESSAGES.EMAIL_INVALID;
  } else if (formData.email.length > VALIDATION_LIMITS.EMAIL_MAX_LENGTH) {
    errors.email = VALIDATION_MESSAGES.MAX_LENGTH('Email', VALIDATION_LIMITS.EMAIL_MAX_LENGTH);
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  if (!formData.password) {
    errors.password = VALIDATION_MESSAGES.REQUIRED('–ü–∞—Ä–æ–ª—å');
  } else if (!validatePassword(formData.password)) {
    errors.password = VALIDATION_MESSAGES.PASSWORD_WEAK;
  } else if (formData.password.length > VALIDATION_LIMITS.PASSWORD_MAX_LENGTH) {
    errors.password = VALIDATION_MESSAGES.MAX_LENGTH('–ü–∞—Ä–æ–ª—å', VALIDATION_LIMITS.PASSWORD_MAX_LENGTH);
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  if (!formData.confirmPassword) {
    errors.confirmPassword = VALIDATION_MESSAGES.REQUIRED('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è');
  } else if (formData.password !== formData.confirmPassword) {
    errors.confirmPassword = VALIDATION_MESSAGES.PASSWORDS_NOT_MATCH;
  }

  return errors;
};

// üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
export const sanitizeInput = (input: string): string => {
  return input?.trim().replace(/\s+/g, ' ') || '';
};

export const normalizeEmail = (email: string): string => {
  return email?.toLowerCase().trim() || '';
};

export const normalizePhone = (phone: string): string => {
  return phone?.replace(/\D/g, '') || '';
};

export const formatPrice = (price: number, currency: string = 'USD'): string => {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: currency
  }).format(price);
};

// üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
export interface PasswordStrength {
  score: number; // 0-4
  feedback: string[];
  isStrong: boolean;
  isVeryStrong: boolean;
}

export const checkPasswordStrength = (password: string): PasswordStrength => {
  const feedback: string[] = [];
  let score = 0;

  if (!password || typeof password !== 'string') {
    return {
      score: 0,
      feedback: ['–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'],
      isStrong: false,
      isVeryStrong: false
    };
  }

  // –î–ª–∏–Ω–∞
  if (password.length >= 8) {
    score += 1;
  } else {
    feedback.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
  }

  // –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
  if (/[a-z]/.test(password)) {
    score += 1;
  } else {
    feedback.push('–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã (a-z)');
  }

  // –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
  if (/[A-Z]/.test(password)) {
    score += 1;
  } else {
    feedback.push('–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (A-Z)');
  }

  // –¶–∏—Ñ—Ä—ã
  if (/\d/.test(password)) {
    score += 1;
  } else {
    feedback.push('–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã (0-9)');
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
    score += 1;
  } else {
    feedback.push('–î–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (!@#$%^&*)');
  }

  const isStrong = score >= 3;
  const isVeryStrong = score >= 4;

  return {
    score: Math.min(score, 4),
    feedback: isStrong ? [] : feedback,
    isStrong,
    isVeryStrong
  };
};

// üéØ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å API)
export const checkEmailAvailability = async (email: string): Promise<boolean> => {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_SERVER_URL}/api/auth/check-email`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email: normalizeEmail(email) }),
    });
    
    const data = await response.json();
    return data.available;
  } catch (error) {
    console.error('Email availability check failed:', error);
    return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º email –¥–æ—Å—Ç—É–ø–Ω—ã–º
  }
};

// üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
export const validateFile = (
  file: File,
  options: {
    maxSize?: number; // –≤ –±–∞–π—Ç–∞—Ö
    allowedTypes?: string[];
    allowedExtensions?: string[];
  } = {}
): string | null => {
  const { maxSize = 5 * 1024 * 1024, allowedTypes = [], allowedExtensions = [] } = options;

  if (maxSize && file.size > maxSize) {
    return `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${Math.round(maxSize / 1024 / 1024)}MB`;
  }

  if (allowedTypes.length && !allowedTypes.includes(file.type)) {
    return `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${allowedTypes.join(', ')}`;
  }

  if (allowedExtensions.length) {
    const extension = file.name.split('.').pop()?.toLowerCase();
    if (!extension || !allowedExtensions.includes(extension)) {
      return `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${allowedExtensions.join(', ')}`;
    }
  }

  return null;
};

// üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤
export const PRODUCT_VALIDATION_CONFIG = {
  title: {
    required: true,
    minLength: VALIDATION_LIMITS.TITLE_MIN_LENGTH,
    maxLength: VALIDATION_LIMITS.TITLE_MAX_LENGTH,
    custom: (value: string) => {
      if (!value?.trim()) {
        return VALIDATION_MESSAGES.REQUIRED('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞');
      }
      return null;
    }
  },
  specification: {
    required: true,
    minLength: 10,
    maxLength: VALIDATION_LIMITS.DESCRIPTION_MAX_LENGTH,
    custom: (value: string) => {
      if (!value?.trim()) {
        return VALIDATION_MESSAGES.REQUIRED('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è');
      }
      return null;
    }
  },
  serialNumber: {
    required: true,
    minLength: VALIDATION_LIMITS.SERIAL_NUMBER_MIN_LENGTH,
    maxLength: VALIDATION_LIMITS.SERIAL_NUMBER_MAX_LENGTH,
    pattern: VALIDATION_PATTERNS.SERIAL_NUMBER,
    custom: (value: string) => {
      if (!value?.trim()) {
        return VALIDATION_MESSAGES.REQUIRED('–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä');
      }
      if (!validateSerialNumber(value)) {
        return VALIDATION_MESSAGES.SERIAL_NUMBER_INVALID;
      }
      return null;
    }
  },
  priceUSD: {
    required: true,
    custom: (value: string | number) => {
      if (!value && value !== 0) {
        return VALIDATION_MESSAGES.REQUIRED('–¶–µ–Ω–∞ USD');
      }
      if (!validatePrice(value)) {
        return VALIDATION_MESSAGES.PRICE_INVALID;
      }
      return null;
    }
  },
  priceUAH: {
    required: true,
    custom: (value: string | number) => {
      if (!value && value !== 0) {
        return VALIDATION_MESSAGES.REQUIRED('–¶–µ–Ω–∞ UAH');
      }
      if (!validatePrice(value)) {
        return VALIDATION_MESSAGES.PRICE_INVALID;
      }
      return null;
    }
  },
  guaranteeStart: {
    required: true,
    custom: (value: string) => {
      if (!value) {
        return VALIDATION_MESSAGES.REQUIRED('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏');
      }
      if (!validateDate(value)) {
        return VALIDATION_MESSAGES.DATE_INVALID;
      }
      return null;
    }
  },
  guaranteeEnd: {
    required: true,
    custom: (value: string, allValues?: any) => {
      if (!value) {
        return VALIDATION_MESSAGES.REQUIRED('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏');
      }
      if (!validateDate(value)) {
        return VALIDATION_MESSAGES.DATE_INVALID;
      }
      if (allValues?.guaranteeStart) {
        const startDate = new Date(allValues.guaranteeStart);
        const endDate = new Date(value);
        if (endDate <= startDate) {
          return '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞';
        }
      }
      return null;
    }
  }
} as const;

export const ORDER_VALIDATION_CONFIG = {
  title: {
    required: true,
    minLength: VALIDATION_LIMITS.TITLE_MIN_LENGTH,
    maxLength: VALIDATION_LIMITS.TITLE_MAX_LENGTH,
    custom: (value: string) => {
      if (!value?.trim()) {
        return VALIDATION_MESSAGES.REQUIRED('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞');
      }
      return null;
    }
  },
  description: {
    required: true,
    minLength: 5,
    maxLength: VALIDATION_LIMITS.DESCRIPTION_MAX_LENGTH,
    custom: (value: string) => {
      if (!value?.trim()) {
        return VALIDATION_MESSAGES.REQUIRED('–û–ø–∏—Å–∞–Ω–∏–µ');
      }
      return null;
    }
  },
  date: {
    required: true,
    custom: (value: string) => {
      if (!value) {
        return VALIDATION_MESSAGES.REQUIRED('–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞');
      }
      if (!validateDate(value)) {
        return VALIDATION_MESSAGES.DATE_INVALID;
      }
      if (!validatePastDate(value)) {
        return VALIDATION_MESSAGES.DATE_FUTURE;
      }
      return null;
    }
  }
} as const;

// üåç –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
export const getUkrainianMessage = {
  required: (field: string) => `${field} –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è`,
  emailInvalid: () => '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å',
  passwordWeak: () => '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏',
  passwordsNotMatch: () => '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å',
  nameInvalid: () => '–Ü–º\'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏',
  nameFullRequired: () => '–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ',
  minLength: (field: string, length: number) => `${field} –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º ${length} —Å–∏–º–≤–æ–ª—ñ–≤`,
  maxLength: (field: string, length: number) => `${field} –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º ${length} —Å–∏–º–≤–æ–ª—ñ–≤`,
};

export const getRussianMessage = {
  required: (field: string) => `${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`,
  emailInvalid: () => '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
  passwordWeak: () => '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã',
  passwordsNotMatch: () => '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
  nameInvalid: () => '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã',
  nameFullRequired: () => '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é',
  minLength: (field: string, length: number) => `${field} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${length} —Å–∏–º–≤–æ–ª–æ–≤`,
  maxLength: (field: string, length: number) => `${field} –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º ${length} —Å–∏–º–≤–æ–ª–æ–≤`,
};

// üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
export const testUkrainianNames = [
  "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ",      // ‚úÖ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ
  "–ú–∞—Ä—ñ—è –ì–æ–Ω—á–∞—Ä—É–∫",     // ‚úÖ –∑–≤–∏—á–∞–π–Ω–µ
  "–ì–Ω–∞—Ç –ú–∏—Ö–∞–π–ª—ñ–≤",      // ‚úÖ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ –≥
  "–û–∫—Å–∞–Ω–∞ –Ñ—Ä–º–∞–∫",       // ‚úÖ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —î  
  "–Ü–≥–æ—Ä –©–µ—Ä–±–∏–Ω–∞",       // ‚úÖ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ —Ç–∞ —â
  "–°–æ—Ñ—ñ—è –ö—Ä–∏–≤–µ–Ω–∫–æ",     // ‚úÖ —É–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ
  "–¢–∞—Ä–∞—Å –ö–∞—Ä–ø–µ–Ω–∫–æ",     // ‚úÖ –∑–≤–∏—á–∞–π–Ω–µ
  "–û–ª–µ–∫—Å—ñ–π –ú–µ–ª—å–Ω–∏–∫"     // ‚úÖ –∑–≤–∏—á–∞–π–Ω–µ
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –∏–º–µ–Ω
export const testUkrainianValidation = () => {
  console.log('üá∫üá¶ –¢–µ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —ñ–º–µ–Ω:');
  testUkrainianNames.forEach(name => {
    const isValid = EXTENDED_CYRILLIC.test(name);
    console.log(`${name}: ${isValid ? '‚úÖ' : '‚ùå'}`);
  });
};

// üéØ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const validators = {
  email: validateEmail,
  required: validateRequired,
  minLength: validateMinLength,
  maxLength: validateMaxLength,
  password: validatePassword,
  strongPassword: validateStrongPassword,
  phone: validatePhone,
  url: validateUrl,
  name: validateName,
  fullName: validateFullName,
  serialNumber: validateSerialNumber,
  price: validatePrice,
  date: validateDate,
  futureDate: validateFutureDate,
  pastDate: validatePastDate,
  file: validateFile
} as const;